{
    "docs": [
        {
            "location": "/",
            "text": "zend-mvc-plugin-flashmessenger\n\n\n\n\n\n\nFlash messages \nderive from Rails\n,\nand are used to expose messages from one action to the next, after which they\nare cleared; a typical use case is with\n\nPost/Redirect/Get\n, where\nthey are created in the \nPOST\n handler, and then displayed by the \nGET\n handler\nto indicate success or failure to the end-user.\n\n\nThis component provides a flash messenger controller plugin for\n\nzend-mvc\n versions 3.0 and up.\n\n\n\n\nFile issues at https://github.com/zendframework/zend-mvc-plugin-flashmessenger/issues\n\n\nDocumentation is at https://docs.zendframework.com/zend-mvc-plugin-flashmessenger/",
            "title": "Home"
        },
        {
            "location": "/#zend-mvc-plugin-flashmessenger",
            "text": "Flash messages  derive from Rails ,\nand are used to expose messages from one action to the next, after which they\nare cleared; a typical use case is with Post/Redirect/Get , where\nthey are created in the  POST  handler, and then displayed by the  GET  handler\nto indicate success or failure to the end-user.  This component provides a flash messenger controller plugin for zend-mvc  versions 3.0 and up.   File issues at https://github.com/zendframework/zend-mvc-plugin-flashmessenger/issues  Documentation is at https://docs.zendframework.com/zend-mvc-plugin-flashmessenger/",
            "title": "zend-mvc-plugin-flashmessenger"
        },
        {
            "location": "/flash-messenger-plugin/",
            "text": "FlashMessenger Controller Plugin\n\n\nThe \nFlashMessenger\n controller plugin is designed to create and retrieve\nself-expiring, session-based messages. It exposes a number of methods:\n\n\n\n\n\n\nsetSessionManager(Zend\\Session\\ManagerInterface $manager) : FlashMessenger\n:\n  Allows you to specify an alternate session manager, if desired.\n\n\n\n\n\n\ngetSessionManager() : Zend\\Session\\ManagerInterface\n: Allows you to retrieve\n  the session manager registered.\n\n\n\n\n\n\ngetContainer() : Zend\\Session\\Container\n: Returns the\n  \nZend\\Session\\Container\n instance in which the flash messages are stored.\n\n\n\n\n\n\nsetNamespace(string $namespace = 'default') : FlashMessenger\n:\n  Allows you to specify a specific namespace in the container in which to store\n  or from which to retrieve flash messages.\n\n\n\n\n\n\ngetNamespace() : string\n: retrieves the name of the flash message namespace.\n\n\n\n\n\n\naddMessage(string $message) : FlashMessenger\n: Allows you to add a message to\n  the current namespace of the session container.\n\n\n\n\n\n\nhasMessages() : bool\n: Lets you determine if there are any flash messages\n  from the current namespace in the session container.\n\n\n\n\n\n\ngetMessages() : array\n: Retrieves the flash messages from the current\n  namespace of the session container\n\n\n\n\n\n\nclearMessages() : bool\n: Clears all flash messages in current namespace of\n  the session container. Returns \ntrue\n if messages were cleared, \nfalse\n if\n  none existed.\n\n\n\n\n\n\nhasCurrentMessages() : bool\n: Indicates whether any messages were added\n  during the current request.\n\n\n\n\n\n\ngetCurrentMessages() : array\n: Retrieves any messages added during the\n  current request.\n\n\n\n\n\n\nclearCurrentMessages() : bool\n: Removes any messages added during the current\n  request. Returns \ntrue\n if current messages were cleared, \nfalse\n if none\n  existed.\n\n\n\n\n\n\nclearMessagesFromContainer() : bool\n: Clear all messages from the container.\n  Returns \ntrue\n if any messages were cleared, \nfalse\n if none existed.\n\n\n\n\n\n\nThis plugin also provides four meaningful namespaces, namely: \nINFO\n, \nERROR\n,\n\nWARNING\n, and \nSUCCESS\n. The following functions are related to these\nnamespaces:\n\n\n\n\n\n\naddInfoMessage(string $message): FlashMessenger\n: Add a message to \"info\"\n  namespace.\n\n\n\n\n\n\nhasCurrentInfoMessages() : bool\n: Check to see if messages have been added to\n  \"info\" namespace within this request.\n\n\n\n\n\n\naddWarningMessage(string $message) : FlashMessenger\n: Add a message to\n  \"warning\" namespace.\n\n\n\n\n\n\nhasCurrentWarningMessages() : bool\n: Check to see if messages have been added\n  to \"warning\" namespace within this request.\n\n\n\n\n\n\naddErrorMessage(string $message) : FlashMessenger\n: Add a message to \"error\"\n  namespace.\n\n\n\n\n\n\nhasCurrentErrorMessages() : bool\n: Check to see if messages have been added\n  to \"error\" namespace within this request.\n\n\n\n\n\n\naddSuccessMessage(string $message) : FlashMessenger\n: Add a message to\n  \"success\" namespace.\n\n\n\n\n\n\nhasCurrentSuccessMessages() :bool\n: Check to see if messages have been added\n  to \"success\" namespace within this request.\n\n\n\n\n\n\nAdditionally, the \nFlashMessenger\n implements both \nIteratorAggregate\n and\n\nCountable\n, allowing you to iterate over and count the flash messages in the\ncurrent namespace within the session container.\n\n\nExamples\n\n\npublic function processAction()\n{\n    // ... do some work ...\n    $this->flashMessenger()->addMessage('You are now logged in.');\n    return $this->redirect()->toRoute('user-success');\n}\n\npublic function successAction()\n{\n    $return = ['success' => true];\n    $flashMessenger = $this->flashMessenger();\n    if ($flashMessenger->hasMessages()) {\n        $return['messages'] = $flashMessenger->getMessages();\n    }\n    return $return;\n}",
            "title": "Controller Plugin"
        },
        {
            "location": "/flash-messenger-plugin/#flashmessenger-controller-plugin",
            "text": "The  FlashMessenger  controller plugin is designed to create and retrieve\nself-expiring, session-based messages. It exposes a number of methods:    setSessionManager(Zend\\Session\\ManagerInterface $manager) : FlashMessenger :\n  Allows you to specify an alternate session manager, if desired.    getSessionManager() : Zend\\Session\\ManagerInterface : Allows you to retrieve\n  the session manager registered.    getContainer() : Zend\\Session\\Container : Returns the\n   Zend\\Session\\Container  instance in which the flash messages are stored.    setNamespace(string $namespace = 'default') : FlashMessenger :\n  Allows you to specify a specific namespace in the container in which to store\n  or from which to retrieve flash messages.    getNamespace() : string : retrieves the name of the flash message namespace.    addMessage(string $message) : FlashMessenger : Allows you to add a message to\n  the current namespace of the session container.    hasMessages() : bool : Lets you determine if there are any flash messages\n  from the current namespace in the session container.    getMessages() : array : Retrieves the flash messages from the current\n  namespace of the session container    clearMessages() : bool : Clears all flash messages in current namespace of\n  the session container. Returns  true  if messages were cleared,  false  if\n  none existed.    hasCurrentMessages() : bool : Indicates whether any messages were added\n  during the current request.    getCurrentMessages() : array : Retrieves any messages added during the\n  current request.    clearCurrentMessages() : bool : Removes any messages added during the current\n  request. Returns  true  if current messages were cleared,  false  if none\n  existed.    clearMessagesFromContainer() : bool : Clear all messages from the container.\n  Returns  true  if any messages were cleared,  false  if none existed.    This plugin also provides four meaningful namespaces, namely:  INFO ,  ERROR , WARNING , and  SUCCESS . The following functions are related to these\nnamespaces:    addInfoMessage(string $message): FlashMessenger : Add a message to \"info\"\n  namespace.    hasCurrentInfoMessages() : bool : Check to see if messages have been added to\n  \"info\" namespace within this request.    addWarningMessage(string $message) : FlashMessenger : Add a message to\n  \"warning\" namespace.    hasCurrentWarningMessages() : bool : Check to see if messages have been added\n  to \"warning\" namespace within this request.    addErrorMessage(string $message) : FlashMessenger : Add a message to \"error\"\n  namespace.    hasCurrentErrorMessages() : bool : Check to see if messages have been added\n  to \"error\" namespace within this request.    addSuccessMessage(string $message) : FlashMessenger : Add a message to\n  \"success\" namespace.    hasCurrentSuccessMessages() :bool : Check to see if messages have been added\n  to \"success\" namespace within this request.    Additionally, the  FlashMessenger  implements both  IteratorAggregate  and Countable , allowing you to iterate over and count the flash messages in the\ncurrent namespace within the session container.",
            "title": "FlashMessenger Controller Plugin"
        },
        {
            "location": "/flash-messenger-plugin/#examples",
            "text": "public function processAction()\n{\n    // ... do some work ...\n    $this->flashMessenger()->addMessage('You are now logged in.');\n    return $this->redirect()->toRoute('user-success');\n}\n\npublic function successAction()\n{\n    $return = ['success' => true];\n    $flashMessenger = $this->flashMessenger();\n    if ($flashMessenger->hasMessages()) {\n        $return['messages'] = $flashMessenger->getMessages();\n    }\n    return $return;\n}",
            "title": "Examples"
        },
        {
            "location": "/flash-messenger-view-helper/",
            "text": "FlashMessenger View Helper\n\n\nThe \nFlashMessenger\n helper is used to render the messages of the\n\nFlashMessenger controller plugin\n.\n\n\nBasic Usage\n\n\nWhen only using the default \nnamespace\n for the \nFlashMessenger\n, you can do the\nfollowing:\n\n\n// Usable in any of your .phtml files\necho $this->flashMessenger()->render();\n\n\n\nThe first argument of the \nrender()\n function is the \nnamespace\n. If no\n\nnamespace\n is defined, the default\n\nZend\\Mvc\\Controller\\Plugin\\FlashMessenger::NAMESPACE_DEFAULT\n will be used,\nwhich translates to \ndefault\n.\n\n\n// Usable in any of your .phtml files\necho $this->flashMessenger()->render('error');\n\n// Alternatively use one of the pre-defined namespaces \n// (aka: use Zend\\Mvc\\Controller\\Plugin\\FlashMessenger;)\necho $this->flashMessenger()->render(FlashMessenger::NAMESPACE_SUCCESS);\n\n\n\nCSS Layout\n\n\nThe \nFlashMessenger\n default rendering adds a CSS class to the generated HTML,\nthat matches the defined \nnamespace\n that should be rendered. While it may work\nwell for the default cases, every so often you may want to add specific CSS\nclasses to the HTML output. This can be done while making use of the second\nparameter of the \nrender()\n function.\n\n\n// Usable in any of your .phtml files\necho $this->flashMessenger()->render('error', ['alert', 'alert-danger']);\n\n\n\nThe output of this example, using the default HTML rendering settings, would\nlook like this:\n\n\n<ul class=\"alert alert-danger\">\n    <li>Some FlashMessenger Content</li>\n    <li>You, the developer, are AWESOME!</li>\n</ul>\n\n\n\nHTML Layout\n\n\nAside from modifying the rendered CSS classes of the \nFlashMessenger\n, you are\nfurthermore able to modify the generated HTML as a whole to create even more\ndistinct visuals for your flash messages. The default output format is defined\nwithin the source code of the \nFlashMessenger\n view helper itself.\n\n\n// Zend/View/Helper/FlashMessenger.php#L41-L43\nprotected $messageCloseString     = '</li></ul>';\nprotected $messageOpenFormat      = '<ul%s><li>';\nprotected $messageSeparatorString = '</li><li>';\n\n\n\nThese defaults exactly match what we're trying to do. The placeholder \n%s\n will\nbe filled with the CSS classes output.\n\n\nTo change this, all we need to do is call the respective setter methods of these\nvariables and give them new strings; for example:\n\n\n// In any of your .phtml files:\necho $this->flashMessenger()\n    ->setMessageOpenFormat('<div%s><p>')\n    ->setMessageSeparatorString('</p><p>')\n    ->setMessageCloseString('</p></div>')\n    ->render('success');\n\n\n\nThe above code sample then would then generate the following output:\n\n\n<div class=\"success\">\n    <p>Some FlashMessenger Content</p>\n    <p>You, who's reading the docs, are AWESOME!</p>\n</div>\n\n\n\nSample Modification for Twitter Bootstrap 3\n\n\nTaking all the above knowledge into account, we can create a nice, highly usable\nand user-friendly rendering strategy using the\n\nBootstrap front-end framework\n version 3 layouts:\n\n\n// In any of your .phtml files:\n$flash = $this->flashMessenger();\n$flash->setMessageOpenFormat('<div%s>\n    <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-hidden=\"true\">\n        &times;\n    </button>\n    <ul><li>')\n    ->setMessageSeparatorString('</li><li>')\n    ->setMessageCloseString('</li></ul></div>');\n\necho $flash->render('error',   array('alert', 'alert-dismissible', 'alert-danger'));\necho $flash->render('info',    array('alert', 'alert-dismissible', 'alert-info'));\necho $flash->render('default', array('alert', 'alert-dismissible', 'alert-warning'));\necho $flash->render('success', array('alert', 'alert-dismissible', 'alert-success'));\n\n\n\nThe output of the above example would create dismissable \nFlashMessages\n with\nthe following HTML markup. The example only covers one type of \nFlashMessenger\n\noutput; if you would have several \nFlashMessages\n available in each of the\nrendered \nnamespaces\n, then you would receive the same output multiple times\nonly having different CSS classes applied.\n\n\n<div class=\"alert alert-dismissable alert-success\">\n    <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-hidden=\"true\">\u00d7</button>\n    <ul>\n        <li>Some FlashMessenger Content</li>\n        <li>You, who's reading the docs, are AWESOME!</li>\n    </ul>\n</div>\n\n\n\nAlternative Configuration of the ViewHelper Layout\n\n\nZend\\View\\Helper\\Service\\FlashMessengerFactory\n checks the application\nconfiguration, making it possible to set up the \nFlashMessenger\n strings through\nyour \nmodule.config.php\n, too. The next example will set up the output to be\nidentical with the above Twitter Bootstrap 3 Example\n\n\n'view_helper_config' => [\n    'flashmessenger' => [\n        'message_open_format'      => '<div%s><button type=\"button\" class=\"close\"\ndata-dismiss=\"alert\" aria-hidden=\"true\">&times;</button><ul><li>',\n        'message_close_string'     => '</li></ul></div>',\n        'message_separator_string' => '</li><li>',\n    ],\n],",
            "title": "View Helper"
        },
        {
            "location": "/flash-messenger-view-helper/#flashmessenger-view-helper",
            "text": "The  FlashMessenger  helper is used to render the messages of the FlashMessenger controller plugin .",
            "title": "FlashMessenger View Helper"
        },
        {
            "location": "/flash-messenger-view-helper/#basic-usage",
            "text": "When only using the default  namespace  for the  FlashMessenger , you can do the\nfollowing:  // Usable in any of your .phtml files\necho $this->flashMessenger()->render();  The first argument of the  render()  function is the  namespace . If no namespace  is defined, the default Zend\\Mvc\\Controller\\Plugin\\FlashMessenger::NAMESPACE_DEFAULT  will be used,\nwhich translates to  default .  // Usable in any of your .phtml files\necho $this->flashMessenger()->render('error');\n\n// Alternatively use one of the pre-defined namespaces \n// (aka: use Zend\\Mvc\\Controller\\Plugin\\FlashMessenger;)\necho $this->flashMessenger()->render(FlashMessenger::NAMESPACE_SUCCESS);",
            "title": "Basic Usage"
        },
        {
            "location": "/flash-messenger-view-helper/#css-layout",
            "text": "The  FlashMessenger  default rendering adds a CSS class to the generated HTML,\nthat matches the defined  namespace  that should be rendered. While it may work\nwell for the default cases, every so often you may want to add specific CSS\nclasses to the HTML output. This can be done while making use of the second\nparameter of the  render()  function.  // Usable in any of your .phtml files\necho $this->flashMessenger()->render('error', ['alert', 'alert-danger']);  The output of this example, using the default HTML rendering settings, would\nlook like this:  <ul class=\"alert alert-danger\">\n    <li>Some FlashMessenger Content</li>\n    <li>You, the developer, are AWESOME!</li>\n</ul>",
            "title": "CSS Layout"
        },
        {
            "location": "/flash-messenger-view-helper/#html-layout",
            "text": "Aside from modifying the rendered CSS classes of the  FlashMessenger , you are\nfurthermore able to modify the generated HTML as a whole to create even more\ndistinct visuals for your flash messages. The default output format is defined\nwithin the source code of the  FlashMessenger  view helper itself.  // Zend/View/Helper/FlashMessenger.php#L41-L43\nprotected $messageCloseString     = '</li></ul>';\nprotected $messageOpenFormat      = '<ul%s><li>';\nprotected $messageSeparatorString = '</li><li>';  These defaults exactly match what we're trying to do. The placeholder  %s  will\nbe filled with the CSS classes output.  To change this, all we need to do is call the respective setter methods of these\nvariables and give them new strings; for example:  // In any of your .phtml files:\necho $this->flashMessenger()\n    ->setMessageOpenFormat('<div%s><p>')\n    ->setMessageSeparatorString('</p><p>')\n    ->setMessageCloseString('</p></div>')\n    ->render('success');  The above code sample then would then generate the following output:  <div class=\"success\">\n    <p>Some FlashMessenger Content</p>\n    <p>You, who's reading the docs, are AWESOME!</p>\n</div>",
            "title": "HTML Layout"
        },
        {
            "location": "/flash-messenger-view-helper/#sample-modification-for-twitter-bootstrap-3",
            "text": "Taking all the above knowledge into account, we can create a nice, highly usable\nand user-friendly rendering strategy using the Bootstrap front-end framework  version 3 layouts:  // In any of your .phtml files:\n$flash = $this->flashMessenger();\n$flash->setMessageOpenFormat('<div%s>\n    <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-hidden=\"true\">\n        &times;\n    </button>\n    <ul><li>')\n    ->setMessageSeparatorString('</li><li>')\n    ->setMessageCloseString('</li></ul></div>');\n\necho $flash->render('error',   array('alert', 'alert-dismissible', 'alert-danger'));\necho $flash->render('info',    array('alert', 'alert-dismissible', 'alert-info'));\necho $flash->render('default', array('alert', 'alert-dismissible', 'alert-warning'));\necho $flash->render('success', array('alert', 'alert-dismissible', 'alert-success'));  The output of the above example would create dismissable  FlashMessages  with\nthe following HTML markup. The example only covers one type of  FlashMessenger \noutput; if you would have several  FlashMessages  available in each of the\nrendered  namespaces , then you would receive the same output multiple times\nonly having different CSS classes applied.  <div class=\"alert alert-dismissable alert-success\">\n    <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-hidden=\"true\">\u00d7</button>\n    <ul>\n        <li>Some FlashMessenger Content</li>\n        <li>You, who's reading the docs, are AWESOME!</li>\n    </ul>\n</div>",
            "title": "Sample Modification for Twitter Bootstrap 3"
        },
        {
            "location": "/flash-messenger-view-helper/#alternative-configuration-of-the-viewhelper-layout",
            "text": "Zend\\View\\Helper\\Service\\FlashMessengerFactory  checks the application\nconfiguration, making it possible to set up the  FlashMessenger  strings through\nyour  module.config.php , too. The next example will set up the output to be\nidentical with the above Twitter Bootstrap 3 Example  'view_helper_config' => [\n    'flashmessenger' => [\n        'message_open_format'      => '<div%s><button type=\"button\" class=\"close\"\ndata-dismiss=\"alert\" aria-hidden=\"true\">&times;</button><ul><li>',\n        'message_close_string'     => '</li></ul></div>',\n        'message_separator_string' => '</li><li>',\n    ],\n],",
            "title": "Alternative Configuration of the ViewHelper Layout"
        }
    ]
}