{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"zend-mvc-plugin-flashmessenger Flash messages derive from Rails , and are used to expose messages from one action to the next, after which they are cleared; a typical use case is with Post/Redirect/Get , where they are created in the POST handler, and then displayed by the GET handler to indicate success or failure to the end-user. This component provides a flash messenger controller plugin for zend-mvc versions 3.0 and up. File issues at https://github.com/zendframework/zend-mvc-plugin-flashmessenger/issues Documentation is at https://docs.zendframework.com/zend-mvc-plugin-flashmessenger/","title":"Home"},{"location":"#zend-mvc-plugin-flashmessenger","text":"Flash messages derive from Rails , and are used to expose messages from one action to the next, after which they are cleared; a typical use case is with Post/Redirect/Get , where they are created in the POST handler, and then displayed by the GET handler to indicate success or failure to the end-user. This component provides a flash messenger controller plugin for zend-mvc versions 3.0 and up. File issues at https://github.com/zendframework/zend-mvc-plugin-flashmessenger/issues Documentation is at https://docs.zendframework.com/zend-mvc-plugin-flashmessenger/","title":"zend-mvc-plugin-flashmessenger"},{"location":"flash-messenger-plugin/","text":"FlashMessenger Controller Plugin The FlashMessenger controller plugin is designed to create and retrieve self-expiring, session-based messages. It exposes a number of methods: setSessionManager(Zend\\Session\\ManagerInterface $manager) : FlashMessenger : Allows you to specify an alternate session manager, if desired. getSessionManager() : Zend\\Session\\ManagerInterface : Allows you to retrieve the session manager registered. getContainer() : Zend\\Session\\Container : Returns the Zend\\Session\\Container instance in which the flash messages are stored. setNamespace(string $namespace = 'default') : FlashMessenger : Allows you to specify a specific namespace in the container in which to store or from which to retrieve flash messages. getNamespace() : string : retrieves the name of the flash message namespace. addMessage(string $message) : FlashMessenger : Allows you to add a message to the current namespace of the session container. hasMessages() : bool : Lets you determine if there are any flash messages from the current namespace in the session container. getMessages() : array : Retrieves the flash messages from the current namespace of the session container clearMessages() : bool : Clears all flash messages in current namespace of the session container. Returns true if messages were cleared, false if none existed. hasCurrentMessages() : bool : Indicates whether any messages were added during the current request. getCurrentMessages() : array : Retrieves any messages added during the current request. clearCurrentMessages() : bool : Removes any messages added during the current request. Returns true if current messages were cleared, false if none existed. clearMessagesFromContainer() : bool : Clear all messages from the container. Returns true if any messages were cleared, false if none existed. This plugin also provides four meaningful namespaces, namely: INFO , ERROR , WARNING , and SUCCESS . The following functions are related to these namespaces: addInfoMessage(string $message): FlashMessenger : Add a message to \"info\" namespace. hasCurrentInfoMessages() : bool : Check to see if messages have been added to \"info\" namespace within this request. addWarningMessage(string $message) : FlashMessenger : Add a message to \"warning\" namespace. hasCurrentWarningMessages() : bool : Check to see if messages have been added to \"warning\" namespace within this request. addErrorMessage(string $message) : FlashMessenger : Add a message to \"error\" namespace. hasCurrentErrorMessages() : bool : Check to see if messages have been added to \"error\" namespace within this request. addSuccessMessage(string $message) : FlashMessenger : Add a message to \"success\" namespace. hasCurrentSuccessMessages() :bool : Check to see if messages have been added to \"success\" namespace within this request. Additionally, the FlashMessenger implements both IteratorAggregate and Countable , allowing you to iterate over and count the flash messages in the current namespace within the session container. Examples public function processAction() { // ... do some work ... $this->flashMessenger()->addMessage('You are now logged in.'); return $this->redirect()->toRoute('user-success'); } public function successAction() { $return = ['success' => true]; $flashMessenger = $this->flashMessenger(); if ($flashMessenger->hasMessages()) { $return['messages'] = $flashMessenger->getMessages(); } return $return; }","title":"Controller Plugin"},{"location":"flash-messenger-plugin/#flashmessenger-controller-plugin","text":"The FlashMessenger controller plugin is designed to create and retrieve self-expiring, session-based messages. It exposes a number of methods: setSessionManager(Zend\\Session\\ManagerInterface $manager) : FlashMessenger : Allows you to specify an alternate session manager, if desired. getSessionManager() : Zend\\Session\\ManagerInterface : Allows you to retrieve the session manager registered. getContainer() : Zend\\Session\\Container : Returns the Zend\\Session\\Container instance in which the flash messages are stored. setNamespace(string $namespace = 'default') : FlashMessenger : Allows you to specify a specific namespace in the container in which to store or from which to retrieve flash messages. getNamespace() : string : retrieves the name of the flash message namespace. addMessage(string $message) : FlashMessenger : Allows you to add a message to the current namespace of the session container. hasMessages() : bool : Lets you determine if there are any flash messages from the current namespace in the session container. getMessages() : array : Retrieves the flash messages from the current namespace of the session container clearMessages() : bool : Clears all flash messages in current namespace of the session container. Returns true if messages were cleared, false if none existed. hasCurrentMessages() : bool : Indicates whether any messages were added during the current request. getCurrentMessages() : array : Retrieves any messages added during the current request. clearCurrentMessages() : bool : Removes any messages added during the current request. Returns true if current messages were cleared, false if none existed. clearMessagesFromContainer() : bool : Clear all messages from the container. Returns true if any messages were cleared, false if none existed. This plugin also provides four meaningful namespaces, namely: INFO , ERROR , WARNING , and SUCCESS . The following functions are related to these namespaces: addInfoMessage(string $message): FlashMessenger : Add a message to \"info\" namespace. hasCurrentInfoMessages() : bool : Check to see if messages have been added to \"info\" namespace within this request. addWarningMessage(string $message) : FlashMessenger : Add a message to \"warning\" namespace. hasCurrentWarningMessages() : bool : Check to see if messages have been added to \"warning\" namespace within this request. addErrorMessage(string $message) : FlashMessenger : Add a message to \"error\" namespace. hasCurrentErrorMessages() : bool : Check to see if messages have been added to \"error\" namespace within this request. addSuccessMessage(string $message) : FlashMessenger : Add a message to \"success\" namespace. hasCurrentSuccessMessages() :bool : Check to see if messages have been added to \"success\" namespace within this request. Additionally, the FlashMessenger implements both IteratorAggregate and Countable , allowing you to iterate over and count the flash messages in the current namespace within the session container.","title":"FlashMessenger Controller Plugin"},{"location":"flash-messenger-plugin/#examples","text":"public function processAction() { // ... do some work ... $this->flashMessenger()->addMessage('You are now logged in.'); return $this->redirect()->toRoute('user-success'); } public function successAction() { $return = ['success' => true]; $flashMessenger = $this->flashMessenger(); if ($flashMessenger->hasMessages()) { $return['messages'] = $flashMessenger->getMessages(); } return $return; }","title":"Examples"},{"location":"flash-messenger-view-helper/","text":"FlashMessenger View Helper The FlashMessenger helper is used to render the messages of the FlashMessenger controller plugin . Basic Usage When only using the default namespace for the FlashMessenger , you can do the following: // Usable in any of your .phtml files echo $this->flashMessenger()->render(); The first argument of the render() function is the namespace . If no namespace is defined, the default Zend\\Mvc\\Controller\\Plugin\\FlashMessenger::NAMESPACE_DEFAULT will be used, which translates to default . // Usable in any of your .phtml files echo $this->flashMessenger()->render('error'); // Alternatively use one of the pre-defined namespaces // (aka: use Zend\\Mvc\\Controller\\Plugin\\FlashMessenger;) echo $this->flashMessenger()->render(FlashMessenger::NAMESPACE_SUCCESS); CSS Layout The FlashMessenger default rendering adds a CSS class to the generated HTML, that matches the defined namespace that should be rendered. While it may work well for the default cases, every so often you may want to add specific CSS classes to the HTML output. This can be done while making use of the second parameter of the render() function. // Usable in any of your .phtml files echo $this->flashMessenger()->render('error', ['alert', 'alert-danger']); The output of this example, using the default HTML rendering settings, would look like this: <ul class=\"alert alert-danger\"> <li>Some FlashMessenger Content</li> <li>You, the developer, are AWESOME!</li> </ul> HTML Layout Aside from modifying the rendered CSS classes of the FlashMessenger , you are furthermore able to modify the generated HTML as a whole to create even more distinct visuals for your flash messages. The default output format is defined within the source code of the FlashMessenger view helper itself. // Zend/View/Helper/FlashMessenger.php#L41-L43 protected $messageCloseString = '</li></ul>'; protected $messageOpenFormat = '<ul%s><li>'; protected $messageSeparatorString = '</li><li>'; These defaults exactly match what we're trying to do. The placeholder %s will be filled with the CSS classes output. To change this, all we need to do is call the respective setter methods of these variables and give them new strings; for example: // In any of your .phtml files: echo $this->flashMessenger() ->setMessageOpenFormat('<div%s><p>') ->setMessageSeparatorString('</p><p>') ->setMessageCloseString('</p></div>') ->render('success'); The above code sample then would then generate the following output: <div class=\"success\"> <p>Some FlashMessenger Content</p> <p>You, who's reading the docs, are AWESOME!</p> </div> Sample Modification for Twitter Bootstrap 3 Taking all the above knowledge into account, we can create a nice, highly usable and user-friendly rendering strategy using the Bootstrap front-end framework version 3 layouts: // In any of your .phtml files: $flash = $this->flashMessenger(); $flash->setMessageOpenFormat('<div%s> <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-hidden=\"true\"> &times; </button> <ul><li>') ->setMessageSeparatorString('</li><li>') ->setMessageCloseString('</li></ul></div>'); echo $flash->render('error', array('alert', 'alert-dismissible', 'alert-danger')); echo $flash->render('info', array('alert', 'alert-dismissible', 'alert-info')); echo $flash->render('default', array('alert', 'alert-dismissible', 'alert-warning')); echo $flash->render('success', array('alert', 'alert-dismissible', 'alert-success')); The output of the above example would create dismissable FlashMessages with the following HTML markup. The example only covers one type of FlashMessenger output; if you would have several FlashMessages available in each of the rendered namespaces , then you would receive the same output multiple times only having different CSS classes applied. <div class=\"alert alert-dismissable alert-success\"> <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-hidden=\"true\">\u00d7</button> <ul> <li>Some FlashMessenger Content</li> <li>You, who's reading the docs, are AWESOME!</li> </ul> </div> Alternative Configuration of the ViewHelper Layout Zend\\View\\Helper\\Service\\FlashMessengerFactory checks the application configuration, making it possible to set up the FlashMessenger strings through your module.config.php , too. The next example will set up the output to be identical with the above Twitter Bootstrap 3 Example 'view_helper_config' => [ 'flashmessenger' => [ 'message_open_format' => '<div%s><button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-hidden=\"true\">&times;</button><ul><li>', 'message_close_string' => '</li></ul></div>', 'message_separator_string' => '</li><li>', ], ],","title":"View Helper"},{"location":"flash-messenger-view-helper/#flashmessenger-view-helper","text":"The FlashMessenger helper is used to render the messages of the FlashMessenger controller plugin .","title":"FlashMessenger View Helper"},{"location":"flash-messenger-view-helper/#basic-usage","text":"When only using the default namespace for the FlashMessenger , you can do the following: // Usable in any of your .phtml files echo $this->flashMessenger()->render(); The first argument of the render() function is the namespace . If no namespace is defined, the default Zend\\Mvc\\Controller\\Plugin\\FlashMessenger::NAMESPACE_DEFAULT will be used, which translates to default . // Usable in any of your .phtml files echo $this->flashMessenger()->render('error'); // Alternatively use one of the pre-defined namespaces // (aka: use Zend\\Mvc\\Controller\\Plugin\\FlashMessenger;) echo $this->flashMessenger()->render(FlashMessenger::NAMESPACE_SUCCESS);","title":"Basic Usage"},{"location":"flash-messenger-view-helper/#css-layout","text":"The FlashMessenger default rendering adds a CSS class to the generated HTML, that matches the defined namespace that should be rendered. While it may work well for the default cases, every so often you may want to add specific CSS classes to the HTML output. This can be done while making use of the second parameter of the render() function. // Usable in any of your .phtml files echo $this->flashMessenger()->render('error', ['alert', 'alert-danger']); The output of this example, using the default HTML rendering settings, would look like this: <ul class=\"alert alert-danger\"> <li>Some FlashMessenger Content</li> <li>You, the developer, are AWESOME!</li> </ul>","title":"CSS Layout"},{"location":"flash-messenger-view-helper/#html-layout","text":"Aside from modifying the rendered CSS classes of the FlashMessenger , you are furthermore able to modify the generated HTML as a whole to create even more distinct visuals for your flash messages. The default output format is defined within the source code of the FlashMessenger view helper itself. // Zend/View/Helper/FlashMessenger.php#L41-L43 protected $messageCloseString = '</li></ul>'; protected $messageOpenFormat = '<ul%s><li>'; protected $messageSeparatorString = '</li><li>'; These defaults exactly match what we're trying to do. The placeholder %s will be filled with the CSS classes output. To change this, all we need to do is call the respective setter methods of these variables and give them new strings; for example: // In any of your .phtml files: echo $this->flashMessenger() ->setMessageOpenFormat('<div%s><p>') ->setMessageSeparatorString('</p><p>') ->setMessageCloseString('</p></div>') ->render('success'); The above code sample then would then generate the following output: <div class=\"success\"> <p>Some FlashMessenger Content</p> <p>You, who's reading the docs, are AWESOME!</p> </div>","title":"HTML Layout"},{"location":"flash-messenger-view-helper/#sample-modification-for-twitter-bootstrap-3","text":"Taking all the above knowledge into account, we can create a nice, highly usable and user-friendly rendering strategy using the Bootstrap front-end framework version 3 layouts: // In any of your .phtml files: $flash = $this->flashMessenger(); $flash->setMessageOpenFormat('<div%s> <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-hidden=\"true\"> &times; </button> <ul><li>') ->setMessageSeparatorString('</li><li>') ->setMessageCloseString('</li></ul></div>'); echo $flash->render('error', array('alert', 'alert-dismissible', 'alert-danger')); echo $flash->render('info', array('alert', 'alert-dismissible', 'alert-info')); echo $flash->render('default', array('alert', 'alert-dismissible', 'alert-warning')); echo $flash->render('success', array('alert', 'alert-dismissible', 'alert-success')); The output of the above example would create dismissable FlashMessages with the following HTML markup. The example only covers one type of FlashMessenger output; if you would have several FlashMessages available in each of the rendered namespaces , then you would receive the same output multiple times only having different CSS classes applied. <div class=\"alert alert-dismissable alert-success\"> <button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-hidden=\"true\">\u00d7</button> <ul> <li>Some FlashMessenger Content</li> <li>You, who's reading the docs, are AWESOME!</li> </ul> </div>","title":"Sample Modification for Twitter Bootstrap 3"},{"location":"flash-messenger-view-helper/#alternative-configuration-of-the-viewhelper-layout","text":"Zend\\View\\Helper\\Service\\FlashMessengerFactory checks the application configuration, making it possible to set up the FlashMessenger strings through your module.config.php , too. The next example will set up the output to be identical with the above Twitter Bootstrap 3 Example 'view_helper_config' => [ 'flashmessenger' => [ 'message_open_format' => '<div%s><button type=\"button\" class=\"close\" data-dismiss=\"alert\" aria-hidden=\"true\">&times;</button><ul><li>', 'message_close_string' => '</li></ul></div>', 'message_separator_string' => '</li><li>', ], ],","title":"Alternative Configuration of the ViewHelper Layout"}]}